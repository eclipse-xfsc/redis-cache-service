// Code generated by goa v3.20.1, DO NOT EDIT.
//
// cache HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/eclipse-xfsc/redis-cache-service/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strconv"

	cache "github.com/eclipse-xfsc/redis-cache-service/gen/cache"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "cache" service "Get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCachePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("cache", "Get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the cache Get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*cache.CacheGetRequest)
		if !ok {
			return goahttp.ErrInvalidType("cache", "Get", "*cache.CacheGetRequest", v)
		}
		{
			head := p.Key
			req.Header.Set("x-cache-key", head)
		}
		if p.Namespace != nil {
			head := *p.Namespace
			req.Header.Set("x-cache-namespace", head)
		}
		if p.Scope != nil {
			head := *p.Scope
			req.Header.Set("x-cache-scope", head)
		}
		if p.Strategy != nil {
			head := *p.Strategy
			req.Header.Set("x-cache-flatten-strategy", head)
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the cache Get
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body any
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("cache", "Get", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("cache", "Get", resp.StatusCode, string(body))
		}
	}
}

// BuildSetRequest instantiates a HTTP request object with method and path set
// to call the "cache" service "Set" endpoint
func (c *Client) BuildSetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SetCachePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("cache", "Set", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSetRequest returns an encoder for requests sent to the cache Set
// server.
func EncodeSetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*cache.CacheSetRequest)
		if !ok {
			return goahttp.ErrInvalidType("cache", "Set", "*cache.CacheSetRequest", v)
		}
		{
			head := p.Key
			req.Header.Set("x-cache-key", head)
		}
		if p.Namespace != nil {
			head := *p.Namespace
			req.Header.Set("x-cache-namespace", head)
		}
		if p.Scope != nil {
			head := *p.Scope
			req.Header.Set("x-cache-scope", head)
		}
		if p.TTL != nil {
			head := *p.TTL
			headStr := strconv.Itoa(head)
			req.Header.Set("x-cache-ttl", headStr)
		}
		body := p.Data
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("cache", "Set", err)
		}
		return nil
	}
}

// DecodeSetResponse returns a decoder for responses returned by the cache Set
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeSetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("cache", "Set", resp.StatusCode, string(body))
		}
	}
}

// BuildSetExternalRequest instantiates a HTTP request object with method and
// path set to call the "cache" service "SetExternal" endpoint
func (c *Client) BuildSetExternalRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SetExternalCachePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("cache", "SetExternal", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSetExternalRequest returns an encoder for requests sent to the cache
// SetExternal server.
func EncodeSetExternalRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*cache.CacheSetRequest)
		if !ok {
			return goahttp.ErrInvalidType("cache", "SetExternal", "*cache.CacheSetRequest", v)
		}
		{
			head := p.Key
			req.Header.Set("x-cache-key", head)
		}
		if p.Namespace != nil {
			head := *p.Namespace
			req.Header.Set("x-cache-namespace", head)
		}
		if p.Scope != nil {
			head := *p.Scope
			req.Header.Set("x-cache-scope", head)
		}
		if p.TTL != nil {
			head := *p.TTL
			headStr := strconv.Itoa(head)
			req.Header.Set("x-cache-ttl", headStr)
		}
		body := p.Data
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("cache", "SetExternal", err)
		}
		return nil
	}
}

// DecodeSetExternalResponse returns a decoder for responses returned by the
// cache SetExternal endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSetExternalResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("cache", "SetExternal", resp.StatusCode, string(body))
		}
	}
}
